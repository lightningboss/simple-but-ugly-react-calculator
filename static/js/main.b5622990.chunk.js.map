{"version":3,"sources":["lib/operations.js","lib/newArrayAfterOperation.js","lib/calculate.js","components/Display.js","components/OperationButton.js","components/NumberPad.js","components/OperationPad.js","Calculator.js","serviceWorker.js","index.js"],"names":["OPERATION_NAMES","ADD","SUBTRACT","MULTIPLY","DIVIDE","OPERATION_SYMBOLS","FUNCTIONS","a","b","isValidOperation","operation","Object","values","includes","newArrayAfterOperation","input","inputWithoutLastElement","slice","length","lastElement","undefined","toConsumableArray","concat","newLastElement","calculate","hasCorrectAmountOfOperands","operandsAndOperationsAlternate","reduce","hasFailed","next","i","isValidInput","hasMultiplication","hasDivision","firstIndexOfMultiplicationOrDivision","multiplicationIndex","indexOf","divisionIndex","Math","min","max","getIndexOfFirstMultiplicationOrDivision","doSingleOperationOnFullArray","doSingleMultiplicationOrDivisionOnFullArray","doSingleAdditionOrSubtractionOnFullArray","indexOfOperation","Error","endOfFirstHalf","startOfSecondHalf","firstHalf","secondHalf","resultOfOperation","_input","slicedToArray","first","operationName","second","simpleCalculationOnSubarray","Display","_ref","value","react_default","createElement","className","OperationButton","handleOperation","onClick","NumberPad","src_components_OperationButton","OperationPad","handleCalculateResult","handleReset","defaultState","operations","Calculator","state","nextOperation","_this","setState","_ref2","objectSpread","_this$state$operation","this","displayString","map","op","join","src_components_Display","src_components_NumberPad","src_components_OperationPad","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Calculator_Calculator","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5622990.chunk.js","sourcesContent":["function add(a, b) {\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction divide(a, b) {\n  return a / b;\n}\n\nexport const OPERATION_NAMES = {\n  ADD: \"ADD\",\n  SUBTRACT: \"SUBTRACT\",\n  MULTIPLY: \"MULTIPLY\",\n  DIVIDE: \"DIVIDE\"\n};\n\nexport const OPERATION_SYMBOLS = {\n  ADD: \"+\",\n  SUBTRACT: \"-\",\n  MULTIPLY: \"*\",\n  DIVIDE: \"/\"\n};\n\nexport const FUNCTIONS = {\n  ADD: add,\n  SUBTRACT: subtract,\n  MULTIPLY: multiply,\n  DIVIDE: divide\n};\n\nexport function isValidOperation(operation) {\n  return Object.values(OPERATION_NAMES).includes(operation);\n}\n","import { isValidOperation } from \"./operations\";\n\n// TODO add support for decimal numbers\n// TODO write tests\n\nexport default function newArrayAfterOperation(input, operation) {\n  const inputWithoutLastElement = input.slice(0, input.length - 1);\n  const lastElement = input[input.length - 1];\n\n  if (lastElement === undefined) {\n    if (isValidOperation(operation)) {\n      return [];\n    }\n\n    return [operation];\n  }\n\n  if (lastElement === \"ERROR\") {\n    return [operation];\n  }\n\n  if (isValidOperation(operation)) {\n    if (isValidOperation(lastElement)) {\n      return [...inputWithoutLastElement, operation];\n    }\n\n    return [...inputWithoutLastElement, lastElement, operation];\n  }\n\n  if (typeof operation === \"number\") {\n    if (typeof lastElement === \"number\") {\n      const newLastElement = lastElement * 10 + operation;\n      return [...inputWithoutLastElement, newLastElement];\n    }\n\n    if (isValidOperation(lastElement)) {\n      return [...inputWithoutLastElement, lastElement, operation];\n    }\n  }\n\n  return [\"SHOULD NOT REACH\"];\n\n  // cases\n  // operation oneof add, mu, sub, div\n  //  check that lastElement is not an operation\n  // operation === '.'\n  //  if lastElement is number add decimal point\n  // operation is number\n  //  if lastElement is a number append operation\n  //  if lastElement is an operation add number to array\n}\n","import { OPERATION_NAMES, FUNCTIONS, isValidOperation } from \"./operations\";\n\nexport default function calculate(input) {\n  if (!isValidInput(input)) {\n    return [\"ERROR\"];\n  }\n\n  if (input.length === 1) {\n    return input;\n  }\n\n  const hasMultiplication = input.includes(OPERATION_NAMES.MULTIPLY);\n  const hasDivision = input.includes(OPERATION_NAMES.DIVIDE);\n  const hasMultiplicationOrDivision = hasMultiplication || hasDivision;\n\n  if (hasMultiplicationOrDivision) {\n    return calculate(doSingleMultiplicationOrDivisionOnFullArray(input));\n  }\n\n  // only addition and subtraction operations in array\n  return calculate(doSingleAdditionOrSubtractionOnFullArray(input));\n}\n\nexport function isValidInput(input) {\n  const hasCorrectAmountOfOperands = input.length % 2 !== 0;\n  const operandsAndOperationsAlternate = input.reduce((hasFailed, next, i) => {\n    if (hasFailed) {\n      return hasFailed;\n    }\n\n    if (i % 2 === 0) {\n      return typeof next === \"number\";\n    } else {\n      return isValidOperation(next);\n    }\n  }, false);\n\n  return hasCorrectAmountOfOperands && operandsAndOperationsAlternate;\n}\n\nexport function doSingleMultiplicationOrDivisionOnFullArray(input) {\n  const firstIndexOfMultiplicationOrDivision = getIndexOfFirstMultiplicationOrDivision(\n    input\n  );\n\n  return doSingleOperationOnFullArray(\n    input,\n    firstIndexOfMultiplicationOrDivision\n  );\n}\n\nexport function doSingleAdditionOrSubtractionOnFullArray(input) {\n  // input has form [1, \"+\", 5, ...]\n  return doSingleOperationOnFullArray(input, 1);\n}\n\nexport function doSingleOperationOnFullArray(input, indexOfOperation) {\n  const isOperation = isValidOperation(input[indexOfOperation]);\n  if (!isOperation) {\n    throw new Error(\"input[index] is not a valid operation\");\n  }\n\n  const endOfFirstHalf = indexOfOperation - 1;\n  const startOfSecondHalf = indexOfOperation + 2;\n\n  const firstHalf = input.slice(0, endOfFirstHalf);\n  const operation = input.slice(endOfFirstHalf, startOfSecondHalf);\n  const secondHalf = input.slice(startOfSecondHalf);\n\n  const resultOfOperation = simpleCalculationOnSubarray(operation);\n  return [...firstHalf, resultOfOperation, ...secondHalf];\n}\n\n// when this function is called we can be sure\n// that there is a multiplication / division because it is checked before\nexport function getIndexOfFirstMultiplicationOrDivision(input) {\n  const multiplicationIndex = input.indexOf(OPERATION_NAMES.MULTIPLY);\n  const divisionIndex = input.indexOf(OPERATION_NAMES.DIVIDE);\n\n  if (multiplicationIndex !== -1 && divisionIndex !== -1) {\n    return Math.min(multiplicationIndex, divisionIndex);\n  }\n\n  // one or both are -1, therefore the other index is the first \"real\" index\n  return Math.max(multiplicationIndex, divisionIndex);\n}\n\nexport function simpleCalculationOnSubarray(input) {\n  if (input.length !== 3) {\n    throw new Error(\"input has to have length of 3\");\n  }\n\n  const [first, operationName, second] = input;\n  return FUNCTIONS[operationName](first, second);\n}\n","import React from \"react\";\nimport \"./Display.css\";\n\nconst Display = ({ value }) => (\n  <div className=\"result-display\">\n    <h2>{value}</h2>\n  </div>\n);\nexport default Display;\n","import React from \"react\";\nimport \"./OperationButton.css\";\n\nconst OperationButton = ({ handleOperation, value }) => (\n  <button className=\"operation-button\" onClick={() => handleOperation(value)}>\n    {value}\n  </button>\n);\nexport default OperationButton;\n","import React from \"react\";\nimport OperationButton from \"./OperationButton\";\n\nimport \"./NumberPad.css\";\n\nconst NumberPad = ({ handleOperation }) => (\n  <div className=\"number-pad\">\n    <div className=\"number-pad-row\">\n      <OperationButton value={1} handleOperation={handleOperation} />\n      <OperationButton value={2} handleOperation={handleOperation} />\n      <OperationButton value={3} handleOperation={handleOperation} />\n    </div>\n    <div className=\"number-pad-row\">\n      <OperationButton value={4} handleOperation={handleOperation} />\n      <OperationButton value={5} handleOperation={handleOperation} />\n      <OperationButton value={6} handleOperation={handleOperation} />\n    </div>\n    <div className=\"number-pad-row\">\n      <OperationButton value={7} handleOperation={handleOperation} />\n      <OperationButton value={8} handleOperation={handleOperation} />\n      <OperationButton value={9} handleOperation={handleOperation} />\n    </div>\n    <div className=\"number-pad-row\">\n      <OperationButton value={0} handleOperation={handleOperation} />\n    </div>\n  </div>\n);\n\nexport default NumberPad;\n","import React from \"react\";\nimport { OPERATION_NAMES } from \"../lib/operations\";\n\nimport OperationButton from \"./OperationButton\";\nimport \"./OperationPad.css\";\n\nconst OperationPad = ({\n  handleOperation,\n  handleCalculateResult,\n  handleReset\n}) => (\n  <div className=\"operation-pad\">\n    <OperationButton\n      handleOperation={handleOperation}\n      value={OPERATION_NAMES.ADD}\n    />\n    <OperationButton\n      handleOperation={handleOperation}\n      value={OPERATION_NAMES.SUBTRACT}\n    />\n    <OperationButton\n      handleOperation={handleOperation}\n      value={OPERATION_NAMES.MULTIPLY}\n    />\n    <OperationButton\n      handleOperation={handleOperation}\n      value={OPERATION_NAMES.DIVIDE}\n    />\n    <div>\n      <OperationButton handleOperation={handleReset} value=\"RESET\" />\n      <OperationButton\n        handleOperation={handleCalculateResult}\n        value=\"CALCULATE RESULT\"\n      />\n    </div>\n  </div>\n);\n\nexport default OperationPad;\n","import React, { Component } from \"react\";\n\nimport { OPERATION_SYMBOLS, isValidOperation } from \"./lib/operations\";\nimport newArrayAfterOperation from \"./lib/newArrayAfterOperation\";\nimport calculate from \"./lib/calculate\";\n\nimport Display from \"./components/Display\";\nimport NumberPad from \"./components/NumberPad\";\nimport OperationPad from \"./components/OperationPad\";\n\nimport \"./Calculator.css\";\n\nconst defaultState = {\n  operations: []\n};\n\nexport default class Calculator extends Component {\n  state = defaultState;\n\n  handleOperation = nextOperation => {\n    this.setState(({ operations }) => ({\n      operations: newArrayAfterOperation(operations, nextOperation)\n    }));\n  };\n\n  handleCalculateResult = () => {\n    this.setState(({ operations }) => ({ operations: calculate(operations) }));\n  };\n\n  handleReset = () => {\n    this.setState(() => ({ ...defaultState }));\n  };\n\n  render() {\n    const { operations = [] } = this.state;\n    const displayString = operations\n      .map(op => (isValidOperation(op) ? OPERATION_SYMBOLS[op] : op))\n      .join(\" \");\n\n    return (\n      <div className=\"calculator\">\n        <Display value={displayString} />\n        <div className=\"operations-wrapper\">\n          <NumberPad handleOperation={this.handleOperation} />\n          <OperationPad\n            handleOperation={this.handleOperation}\n            handleCalculateResult={this.handleCalculateResult}\n            handleReset={this.handleReset}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Calculator from \"./Calculator\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}